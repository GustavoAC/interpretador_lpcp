struct arvore {
  int num;
  ptr arvore sad;
  ptr arvore sae;
}

procedure inserir (ptr arvore tree; int numero) {
	ptr arvore null;
	if (($tree).num > numero) then
		if (($tree).sae == null) then
			ptr arvore novo;
			novo => new arvore;
			$novo.num = numero;
			($tree).sae = novo;
		else
			inserir(arvore.sae, numero);
		endif
	endif

	if (($tree).num <= numero) then
		if (($tree).sad == null) then
			ptr arvore novo;
			novo => new arvore;
			$novo.num = numero;
			($tree).sad = novo;
		else
			inserir(arvore.sad, numero);
		endif
	endif

}

procedure chave_minima (arvore tree; int contador){
	ptr arvore null;
	if (tree.sad == null) then
		print "valor minimo: ";
		print tree.num;
		print "Nivel: ";
		print contador;
	else 
		contador = contador + 1;
		chave_minima(tree.sad, contador);
	endif
}

procedure chave_maxima (arvore tree; int contador){
	ptr arvore null;
	if (tree.sae == null) then
		print "valor maximo: ";
		print tree.num;
		print "Nivel: ";
		print contador;
	else 
		contador = contador + 1;
		chave_minima(tree.sae, contador);
	endif
}

procedure imprimir_arvore(arvore tree){
	
	print tree.num;
	imprimir_arvore(tree.sae);
	imprimir_arvore(tree.sad);
	
}

function arvore_seq_valores ([int] seq): ptr arvore {
	int contador_ex;
	contador_ex = 1;
	ptr arvore raiz;
	raiz => new arvore;
	($raiz).num = seq[0];
	while (contador_ex < len(seq)) do
		inserir(raiz, seq[contador_ex]);
		contador_ex = contador_ex + 1; 
	endwhile

	return raiz;
}

[int] lista;
ptr [int] listaRef;
listaRef => lista;

pushBack(listaRef, 3);
pushBack(listaRef, 80);
pushBack(listaRef, 4);
pushBack(listaRef, 55);
pushBack(listaRef, 1);
pushBack(listaRef, 70);

ptr arvore raiz;

raiz = arvore_seq_valores(lista);

